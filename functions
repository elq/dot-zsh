# list images only
limg() {
    local -a images
    images=( *.{jpg,gif,png}(.N) )
    if [[ $#images -eq 0 ]] ; then
	print "No image files found"
    else
	ls "$@" "$images[@]"
    fi
}

# List files which have been modified within the last {\it n} days
new() { print -l *(m-$1) }

# Clean up directory - remove well known tempfiles
purge() {
    FILES=(*~(N) .*~(N) \#*\#(N) *.o(N) a.out(N) *.core(N) *.cmo(N) *.cmi(N) .*.swp(N))
    NBFILES=${#FILES}
    if [[ $NBFILES > 0 ]]; then
        print $FILES
        local ans
        echo -n "Remove these files? [y/n] "
        read -q ans
        if [[ $ans == "y" ]]
        then
            rm ${FILES}
            echo ">> $PWD purged, $NBFILES files removed"
        else
            echo "Ok. .. than not.."
        fi
    fi
}


# Show some status info
status() {
    print ""
    print "Date..: "$(date "+%Y-%m-%d %H:%M:%S")""
    print "Shell.: Zsh $ZSH_VERSION (PID = $$, $SHLVL nests)"
    print "Term..: $TTY ($TERM), $BAUD bauds, $COLUMNS x $LINES cars"
    print "Login.: $LOGNAME (UID = $EUID) on $HOST"
    print "Uptime:$(uptime)"
    print ""
}


function + {
    pushd .
}

function _ {
    popd
}

#f5# Create Directoy and \kbd{cd} to it
mcd()     { mkdir -p "$@"; cd "$@" } # mkdir && cd

# download video from youtube
ytdl() {
    if ! [ -n "$2" ] ; then
	print "Usage: ydtl http://youtube.com/watch?v=.... outputfile.flv">&2
	return 1
    else
	wget -O${2} "http://youtube.com/get_video?"${${${"$(wget -o/dev/null -O- "${1}" | grep -e watch_fullscreen)"}##*watch_fullscreen\?}%%\&fs=*}
    fi
}

# Grep in history
greph () { history 0 | grep $1 }

# Select items for specific command(s) from history
selhist() {
    emulate -L zsh
    local TAB=$'\t';
    (( $# < 1 )) && {
        echo "Usage: $0 command"
        return 1
    };
    cmd=(${(f)"$(grep -w $1 $HISTFILE | sort | uniq | pr -tn)"})
    print -l $cmd | less -F
    echo -n "enter number of desired command [1 - $(( ${#cmd[@]} - 1 ))]: "
    local answer
    read answer
    print -z "${cmd[$answer]#*$TAB}"
}

# Smart archive creator
smartcompress() {
    if [ $2 ]; then
        case $2 in
            tgz | tar.gz)   tar -zcvf$1.$2 $1 ;;
            tbz2 | tar.bz2) tar -jcvf$1.$2 $1 ;;
            tar.Z)          tar -Zcvf$1.$2 $1 ;;
            tar)            tar -cvf$1.$2  $1 ;;
            gz | gzip)      gzip           $1 ;;
            bz2 | bzip2)    bzip2          $1 ;;
            *)
                echo "Error: $2 is not a valid compression type"
                ;;
        esac
    else
        smartcompress $1 tar.gz
    fi
}

# View all README-like files in current directory in pager
readme() {
    local files
    files=(./(#i)*(read*me|lue*m(in|)ut)*(ND))
            if (($#files))
            then $PAGER $files
            else
                print 'No README files.'
            fi
	}

# check for user, if not running as root set $SUDO to sudo
(( EUID != 0 )) && SUDO='sudo' || SUDO=''

salias() {
    # creates an alias and precedes the command with
    # sudo if $EUID is not zero.
    local only=0 ; local multi=0
    while [[ ${1} == -* ]] ; do
      case ${1} in
        (-o) only=1 ;;
        (-a) multi=1 ;;
        (--) shift ; break ;;
        (-h)
          printf 'usage: salias [-h|-o|-a] <alias-expression>\n'
          printf '  -h      shows this help text.\n'
          printf '  -a      replace '\'' ; '\'' sequences with '\'' ; sudo '\''.\n'
          printf '          be careful using this option.\n'
          printf '  -o      only sets an alias if a preceding sudo would be needed.\n'
          return 0
          ;;
        (*) printf "unkown option: '%s'\n" "${1}" ; return 1 ;;
      esac
      shift
    done
    if (( ${#argv} > 1 )) ; then
      printf 'Too many arguments %s\n' "${#argv}"
      return 1
    fi
    key="${1%%\=*}" ;  val="${1#*\=}"
    if (( EUID == 0 )) && (( only == 0 )); then
      alias -- "${key}=${val}"
    elif (( EUID > 0 )) ; then
      (( multi > 0 )) && val="${val// ; / ; sudo }"
      alias -- "${key}=sudo ${val}"
    fi
    return 0
  }

# run command line as user root via sudo:
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    [[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
}
zle -N sudo-command-line
#k# Put the current command line into a \kbd{sudo} call
bindkey "^Os" sudo-command-line